<!DOCTYPE html>
<html>
  <head>
    <title>Roubos</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=" crossorigin="" />
    <link rel="stylesheet" href="/css/style.css">
  </head>
  <body>
    <div id="map-container">
      <div id="map"></div>
      <div id="map-controls" hidden>
        <input type="range" min="0" max="1" list="years" class="years">
        <datalist id="years" class="years">
        </datalist>
      </div>
    </div>

    <div id="legend">
      <h2>Número de assaltos a transeuntes:</h2>
      <span id="legend-content"></span>
    </div>
    
    <script>
      async function fetchHoodGeoJSON() {
        const response = await fetch('/hood/geo');
        const hood = await response.json();
        return hood;
      }

      async function fetchHoodHistoryJSON() {
        const response = await fetch('/hood/history');
        const robbery = await response.json();
        return robbery;
      }

      function getHeatmapColor(value, min, max) {
        const percent = (value - min) / (max - min);
        const hue = (1 - percent) * 240;
        const rgb = hslToRgb(hue, 100, 50);

        return `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;
      }

      function hslToRgb(h, s, l) {
        h = ((h % 360) + 360) % 360;
        s = s / 100;
        l = l / 100;

        const c = (1 - Math.abs(2 * l - 1)) * s;
        const x = c * (1 - Math.abs((h / 60) % 2 - 1));
        const m = l - c / 2;

        let r = 0, g = 0, b = 0;
        if (0 <= h && h < 60) {
          r = c; g = x; b = 0;
        } else if (60 <= h && h < 120) {
          r = x; g = c; b = 0;
        } else if (120 <= h && h < 180) {
          r = 0; g = c; b = x;
        } else if (180 <= h && h < 240) {
          r = 0; g = x; b = c;
        } else if (240 <= h && h < 300) {
          r = x; g = 0; b = c;
        } else if (300 <= h && h < 360) {
          r = c; g = 0; b = x;
        }

        r = Math.round((r + m) * 255);
        g = Math.round((g + m) * 255);
        b = Math.round((b + m) * 255);

        return [r, g, b];
      }

      function addElementsToLegend(featureGroup, robberyByHood) {
        const legendContent = document.getElementById('legend-content');
        legendContent.innerHTML = '';
        for (let layer of featureGroup.getLayers()) {
          const hoodName = layer.feature.properties['Bairro'];
          const value = layer.feature.properties['Value'];
          const robberyPopulationRatio = layer.feature.properties['Data']['robberyPopulationRatio'];
          const legendBoxDisplayDiv = document.createElement('div');
          legendBoxDisplayDiv.className = 'legend-box';
          // legendBoxDisplayDiv.style = 'background: #65BA4A;';
          
          const legendDisplayDiv = document.createElement('div');
          legendDisplayDiv.className = 'legend-display-flex';
          
          legendDisplayDiv.appendChild(legendBoxDisplayDiv);

          legendDisplayDiv.innerHTML += `${hoodName}: ${value} (per capita: ${(robberyPopulationRatio * 100).toFixed(3)}%)`;

          legendContent.appendChild(legendDisplayDiv);
        }
      }

      function updateFeatures(map, featureGroup, dataByHood) {
        for (let layer of featureGroup.getLayers()) {
          let hoodName = layer.feature.properties['Bairro'];
          let hoodData = dataByHood[hoodName];

          layer.feature.properties['Data'] = hoodData;

          // TODO: deprecate
          const attrName = 'robbery';
          let attrValue = hoodData && hoodData[attrName];
          const attrValueNormalized = hoodData && hoodData[`${attrName}Normalized`];

          if (typeof(attrValue) !== 'number') {
            console.warn(`Couldn't find '${attrName}' data for '${hoodName}'.`);
          }

          attrValue ||= 0;
          layer.feature.properties['ValueDomain'] = attrName;
          layer.feature.properties['Value'] = attrValue;
          layer.feature.properties['ValueNormalized'] = attrValueNormalized || attrValue;
          layer.feature.properties['CenterPoint'] = layer.getCenter();
        }

        featureGroup.setStyle((feature) => {
          const featureDensityLevel = Math.tanh(feature.properties['Data']['robberyPopulationRatioNormalized'] || 0) * .5 + .5;
          return {
            color: "black",
            weight: .5,
            fillColor: getHeatmapColor(featureDensityLevel, 0, 1),
            fillOpacity: 0.5
            // fillOpacity: Math.log(feature.getProperty('Value') + 1)
          };
        })
      }

      function infoWindowContent(feature) {
        return '<div id="content">'+
          '<div>'+
          '<span>Bairro:</span>'+
          `<span id="hood-info-box">${feature.properties['Bairro']}</span>`+
          '</div>'+
          '<div>'+
          '<span>Assaltos a transeuntes:</span>'+
          `<span id="density-info-box">${feature.properties['Value']}</span>`+
          '</div>'+
          '<div>'+
          '<span>População:</span>'+
          `<span id="population-info-box">${feature.properties['População 2010']}</span> pessoas`+
          '</div>';
      }

      // Tooltip for hood
      function createInfoWindow(map, featureGroup) {
        const infoWindow = new L.Popup(map.getCenter());

        featureGroup.addEventListener("mouseover", (event) => {
          const contentString = infoWindowContent(event.layer.feature);
          infoWindow.setContent(contentString);
          // Set infowindow in current position
          infoWindow.setLatLng(event.latlng);

          // Set infowindow in center of hood
          // infoWindow.setLatLng(event.feature.properties['CenterPoint']);
          if (!infoWindow.isOpen())
            infoWindow.openOn(map);
        });

        featureGroup.addEventListener("mouseout", (event) => {
          infoWindow.close();
        });

        featureGroup.addEventListener("mousemove", (event) => {
          if(infoWindow) {
            if (!infoWindow.isOpen())
              infoWindow.openOn(map);
            infoWindow.setLatLng(event.latlng);
          }
        });
      }

      // Initialize and display the map
      function initMap() {
        // Maceió bounds
        let selectedCityBounds = new L.LatLngBounds(
          new L.LatLng(-9.722334881080501, -35.818859918457036), // southwest corner
          new L.LatLng(-9.46099520993466, -35.541455133300786) // northeast corner
        )

        // Create a new map object centered on the location
        let map = new L.map(document.getElementById('map'), {
          zoom: 11,
          center: selectedCityBounds.getCenter()
        });

        let tileLayer = new L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);

        L.Control.Hoods = L.Control.extend({
            onAdd: function(map) {
              let elt = document.getElementById('legend');
              // prevent to propagate mouse wheel event affecting map zoom in/out
              elt.addEventListener('wheel', (evt) => { evt.stopPropagation(); }, { passive: false })
              return elt;
            },

            onRemove: function(map) {
                // Nothing to do here
            }
        });

        L.control.hoods = function(opts) {
            return new L.Control.Hoods(opts);
        }

        L.control.hoods({ position: 'topright' }).addTo(map);

        let featureGroupPromise = fetchHoodGeoJSON().then(hoods => {
          hoods.features = hoods.features
            .filter(feature => {
              return !feature.geometry.coordinates.some(coords => {
                return coords.some(coord => {
                  let point = {lat: coord[1], lng: coord[0]};
                  return !selectedCityBounds.contains(point);
                })
              })
            })
            .sort((f1, f2) => f1.properties['Bairro'].localeCompare(f2.properties['Bairro']))

          let featureGroup = new L.geoJson(hoods).addTo(map);

          createInfoWindow(map, featureGroup);

          return featureGroup;
        });

        fetchHoodHistoryJSON().then(async hoodHistory => {
          const years = Object.keys(hoodHistory).sort();
          const yearsInput = document.querySelector('input.years');
          const yearsDataList = document.querySelector('datalist.years');

          yearsInput.setAttribute('min', years[0].toString());
          yearsInput.setAttribute('max', years[years.length-1].toString());
          yearsInput.value = yearsInput.getAttribute('max');

          while(yearsDataList.firstChild) {
            yearsDataList.removeChild(yearsDataList.firstChild);
          }

          for (let year of years) {
            const newOption = document.createElement('option');
            newOption.value = newOption.label = year;
            yearsDataList.appendChild(newOption);
          }

          let featureGroup = await featureGroupPromise;

          yearsInput.addEventListener('input', (evt) => {
            updateFeatures(map, featureGroup, hoodHistory[yearsInput.value]);
            addElementsToLegend(featureGroup, hoodHistory);
          });

          yearsInput.dispatchEvent(new Event('input'));

          document.querySelector('#map-controls').removeAttribute('hidden');
        });
      }
    </script>
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js" integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=" crossorigin="" onload="initMap()"></script>
  </body>
</html>
