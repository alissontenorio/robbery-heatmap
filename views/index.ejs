<!DOCTYPE html>
<html>
  <head>
    <title>Roubos</title>
    <link rel="stylesheet" href="/css/style.css">
  </head>
  <body>
    <div id="map-container">
      <div id="map"></div>
      <div id="map-controls" hidden>
        <input type="range" min="0" max="1" list="years" class="years">
        <datalist id="years" class="years">
        </datalist>
      </div>
    </div>

    <div id="legend">
      <h2>Número de assaltos a transeuntes:</h2>
      <span id="legend-content"></span>
    </div>
    
    <script>
      async function fetchHoodGeoJSON() {
        const response = await fetch('/hood/geo');
        const hood = await response.json();
        return hood;
      }

      async function fetchHoodHistoryJSON() {
        const response = await fetch('/hood/history');
        const robbery = await response.json();
        return robbery;
      }

      function getHeatmapColor(value, min, max) {
        const percent = (value - min) / (max - min);
        const hue = (1 - percent) * 240;
        const rgb = hslToRgb(hue, 100, 50);

        return `rgb(${rgb[0]}, ${rgb[1]}, ${rgb[2]})`;
      }

      function hslToRgb(h, s, l) {
        h = ((h % 360) + 360) % 360;
        s = s / 100;
        l = l / 100;

        const c = (1 - Math.abs(2 * l - 1)) * s;
        const x = c * (1 - Math.abs((h / 60) % 2 - 1));
        const m = l - c / 2;

        let r = 0, g = 0, b = 0;
        if (0 <= h && h < 60) {
          r = c; g = x; b = 0;
        } else if (60 <= h && h < 120) {
          r = x; g = c; b = 0;
        } else if (120 <= h && h < 180) {
          r = 0; g = c; b = x;
        } else if (180 <= h && h < 240) {
          r = 0; g = x; b = c;
        } else if (240 <= h && h < 300) {
          r = x; g = 0; b = c;
        } else if (300 <= h && h < 360) {
          r = c; g = 0; b = x;
        }

        r = Math.round((r + m) * 255);
        g = Math.round((g + m) * 255);
        b = Math.round((b + m) * 255);

        return [r, g, b];
      }

      function addElementsToLegend(features, robberyByHood) {
        const legendContent = document.getElementById('legend-content');
        legendContent.innerHTML = '';
        for (feature of features) {
          const hoodName = feature.getProperty('Bairro');
          const value = feature.getProperty('Value');
          const robberyPopulationRatio = feature.getProperty('Data')['robberyPopulationRatio'];
          const legendBoxDisplayDiv = document.createElement('div');
          legendBoxDisplayDiv.className = 'legend-box';
          // legendBoxDisplayDiv.style = 'background: #65BA4A;';
          
          const legendDisplayDiv = document.createElement('div');
          legendDisplayDiv.className = 'legend-display-flex';
          
          legendDisplayDiv.appendChild(legendBoxDisplayDiv);

          legendDisplayDiv.innerHTML += `${hoodName}: ${value} (per capita: ${(robberyPopulationRatio * 100).toFixed(3)}%)`;

          legendContent.appendChild(legendDisplayDiv);
        }
      }

      function calculatePolygonCenterPoint(feature) {
        const polygonCoords = feature.getGeometry();
        const bounds = new google.maps.LatLngBounds();
        polygonCoords.forEachLatLng(function(element,index){bounds.extend(element)});
        return bounds.getCenter();
      }

      function updateFeatures(map, features, dataByHood) {
        for (feature of features) {
          const hoodName = feature.getProperty('Bairro');
          const hoodData = dataByHood[hoodName];

          feature.setProperty('Data', hoodData);

          // TODO: deprecate
          const attrName = 'robbery';
          let attrValue = hoodData && hoodData[attrName];
          const attrValueNormalized = hoodData && hoodData[`${attrName}Normalized`];

          if (typeof(attrValue) !== 'number') {
            console.warn(`Couldn't find '${attrName}' data for '${hoodName}'.`);
          }

          attrValue ||= 0;
          feature.setProperty('ValueDomain', attrName);
          feature.setProperty('Value', attrValue);
          feature.setProperty('ValueNormalized', attrValueNormalized || attrValue);
          feature.setProperty('CenterPoint', calculatePolygonCenterPoint(feature));
        }

        map.data.setStyle((feature) => {
          const featureDensityLevel = Math.tanh(feature.getProperty('Data')['robberyPopulationRatioNormalized'] || 0) * .5 + .5;
          return {
            strokeColor: "black",
            strokeWeight: .5,
            fillColor: getHeatmapColor(featureDensityLevel, 0, 1),
            fillOpacity: 0.5
            // fillOpacity: Math.log(feature.getProperty('Value') + 1)
          };
        })
      }

      function infoWindowContent(event) {
        return '<div id="content">'+
          '<div>'+
          '<span>Bairro:</span>'+
          `<span id="hood-info-box">${event.feature.getProperty('Bairro')}</span>`+
          '</div>'+
          '<div>'+
          '<span>Assaltos a transeuntes:</span>'+
          `<span id="density-info-box">${event.feature.getProperty('Value')}</span>`+
          '</div>'+
          '<div>'+
          '<span>População:</span>'+
          `<span id="population-info-box">${event.feature.getProperty('População 2010')}</span> pessoas`+
          '</div>';
      }

      // Tooltip for hood
      function createInfoWindow(map) {
        const infoWindow = new google.maps.InfoWindow();

        map.data.addListener("mouseover", (event) => {
          console.log('oxe');
          const contentString = infoWindowContent(event);
          infoWindow.setContent(contentString);
          // Set infowindow in current position
          infoWindow.setPosition(event.latLng);

          // Set infowindow in center of hood
          // infoWindow.setPosition(event.feature.getProperty('CenterPoint'));
          infoWindow.open(map);
        });

        map.data.addListener("mouseout", (event) => {
          infoWindow.close();
        });

        map.data.addListener("mousemove", (event) => {
          if(infoWindow) {
            infoWindow.setPosition(event.latLng);
          }
        });
      }

      // Initialize and display the map
      function initMap() {
        // Maceió bounds
        const selectedCityBounds = new google.maps.LatLngBounds(
          new google.maps.LatLng(-9.722334881080501, -35.818859918457036), // southwest corner
          new google.maps.LatLng(-9.46099520993466, -35.541455133300786) // northeast corner
        )

        // Set the location to display on the map
        const location = selectedCityBounds.getCenter()

        // Create a new map object centered on the location
        const map = new google.maps.Map(document.getElementById('map'), {
          zoom: 11,
          center: location,
          mapTypeControl: false,
          streetViewControl: false,
          styles: [
            {
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#f5f5f5"
                }
              ]
            },
            {
              "elementType": "labels.icon",
              "stylers": [
                {
                  "visibility": "off"
                }
              ]
            },
            {
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#616161"
                }
              ]
            },
            {
              "elementType": "labels.text.stroke",
              "stylers": [
                {
                  "color": "#f5f5f5"
                }
              ]
            },
            {
              "featureType": "administrative.land_parcel",
              "elementType": "labels",
              "stylers": [
                {
                  "visibility": "off"
                }
              ]
            },
            {
              "featureType": "administrative.land_parcel",
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#bdbdbd"
                }
              ]
            },
            {
              "featureType": "poi",
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#eeeeee"
                }
              ]
            },
            {
              "featureType": "poi",
              "elementType": "labels.text",
              "stylers": [
                {
                  "visibility": "off"
                }
              ]
            },
            {
              "featureType": "poi",
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#757575"
                }
              ]
            },
            {
              "featureType": "poi.park",
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#e5e5e5"
                }
              ]
            },
            {
              "featureType": "poi.park",
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#9e9e9e"
                }
              ]
            },
            {
              "featureType": "road",
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#ffffff"
                }
              ]
            },
            {
              "featureType": "road.arterial",
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#757575"
                }
              ]
            },
            {
              "featureType": "road.highway",
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#dadada"
                }
              ]
            },
            {
              "featureType": "road.highway",
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#616161"
                }
              ]
            },
            {
              "featureType": "road.local",
              "elementType": "labels",
              "stylers": [
                {
                  "visibility": "off"
                }
              ]
            },
            {
              "featureType": "road.local",
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#9e9e9e"
                }
              ]
            },
            {
              "featureType": "transit.line",
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#e5e5e5"
                }
              ]
            },
            {
              "featureType": "transit.station",
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#eeeeee"
                }
              ]
            },
            {
              "featureType": "water",
              "elementType": "geometry",
              "stylers": [
                {
                  "color": "#c9c9c9"
                }
              ]
            },
            {
              "featureType": "water",
              "elementType": "labels.text.fill",
              "stylers": [
                {
                  "color": "#9e9e9e"
                }
              ]
            }
          ]
        });

        map.controls[google.maps.ControlPosition.RIGHT_TOP].push(document.getElementById('legend'));

        const featuresPromise = fetchHoodGeoJSON().then(hoods => {
          hoods.features = hoods.features.filter(feature => {
            return !feature.geometry.coordinates.some(coords => {
              return coords.some(coord => {
                const point = {lat: coord[1], lng: coord[0]}
                return !selectedCityBounds.contains(point);
              })
            })
          })
          const features = map.data.addGeoJson(hoods).sort(
            (f1, f2) => {
              f1.getProperty('Bairro').localeCompare(f2.getProperty('Bairro'))
            }
          );
                    
          createInfoWindow(map);

          return features;
        });

        fetchHoodHistoryJSON().then(async hoodHistory => {
          const years = Object.keys(hoodHistory).sort();
          const yearsInput = document.querySelector('input.years');
          const yearsDataList = document.querySelector('datalist.years');

          yearsInput.setAttribute('min', years[0].toString());
          yearsInput.setAttribute('max', years[years.length-1].toString());
          yearsInput.value = yearsInput.getAttribute('max');

          while(yearsDataList.firstChild) {
            yearsDataList.removeChild(yearsDataList.firstChild);
          }

          for (let year of years) {
            const newOption = document.createElement('option');
            newOption.value = newOption.label = year;
            yearsDataList.appendChild(newOption);
          }

          const features = await featuresPromise;

          yearsInput.addEventListener('input', (evt) => {
            updateFeatures(map, features, hoodHistory[yearsInput.value]);
            addElementsToLegend(features, hoodHistory);
          });

          yearsInput.dispatchEvent(new Event('input'));

          document.querySelector('#map-controls').removeAttribute('hidden');
        });

        // Add a marker for the location
        // var marker = new google.maps.Marker({
        //   position: location,
        //   map: map,
        //   title: 'Maceio - AL'
        // });
      }
    </script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= GMAPS_API_KEY %>&callback=initMap"></script>
  </body>
</html>
