<!DOCTYPE html>
<html>
  <head>
    <title>Roubos</title>
    <link rel="stylesheet" href="/css/style.css">
  </head>
  <body>
    <div id="map-container">
      <div id="map"></div>
      <div id="map-controls" hidden>
        <input type="range" min="0" max="1" list="years" class="years">
        <datalist id="years" class="years">
        </datalist>
      </div>
    </div>

    <div id="legend">
      <h2>Número de assaltos a transeuntes:</h2>
      <div id="legend-content"></div>
    </div>

    <div>
      Número de assaltos a transeuntes:
      <div id="density-info-box">?</div>
    </div>
    <br>
    <div>
      População:
      <div id="population-info-box">?</div> pessoas
    </div>
    
    <script>
      async function fetchHoodGeoJSON() {
        const response = await fetch('/hood/geo');
        const hood = await response.json();
        return hood;
      }

      async function fetchHoodHistoryJSON() {
        const response = await fetch('/hood/history');
        const robbery = await response.json();
        return robbery;
      }

      function addElementsToLegend(features, robberyByHood) {
        const legendContent = document.getElementById('legend-content');
        legendContent.innerHTML = '';
        for (feature of features) {
          const hoodName = feature.getProperty('Bairro');
          const value = feature.getProperty('Value');
          const robberyPopulationRatio = feature.getProperty('Data')['robberyPopulationRatio'];
          const legendBoxDisplayDiv = document.createElement('div');
          legendBoxDisplayDiv.className = 'legend-box';
          // legendBoxDisplayDiv.style = 'background: #65BA4A;';
          
          const legendDisplayDiv = document.createElement('div');
          legendDisplayDiv.className = 'legend-display-flex';
          
          legendDisplayDiv.appendChild(legendBoxDisplayDiv);

          legendDisplayDiv.innerHTML += `${hoodName}:`;
          for (let entry of Object.entries({'Assaltos': value, 'Per capita': `${(robberyPopulationRatio * 2).toFixed(3)}%`})) {
            legendDisplayDiv.innerHTML += `<br/>${entry[0]} = ${entry[1]}`;
          }

          legendContent.appendChild(legendDisplayDiv);
        }
      }

      function updateFeatures(map, features, dataByHood) {
        for (feature of features) {
          let hoodName = feature.getProperty('Bairro');
          let hoodData = dataByHood[hoodName];

          feature.setProperty('Data', hoodData);

          // TODO: deprecate
          let attrName = 'robbery';
          let attrValue = hoodData && hoodData[attrName];
          let attrValueNormalized = hoodData && hoodData[`${attrName}Normalized`];

          if (typeof(attrValue) !== 'number') {
            console.warn(`Couldn't find '${attrName}' data for '${hoodName}'.`);
          }

          attrValue ||= 0;
          feature.setProperty('ValueDomain', attrName);
          feature.setProperty('Value', attrValue);
          feature.setProperty('ValueNormalized', attrValueNormalized || attrValue);
        }

        map.data.setStyle((feature) => ({
          strokeColor: "black",
          strokeWeight: .5,
          fillColor: 'red',
          fillOpacity: (Math.tanh(feature.getProperty('Data')['robberyPopulationRatioNormalized'] || 0) * .5 + .5) * 0.75
          // fillOpacity: Math.log(feature.getProperty('Value') + 1)
        }))
      }

      // Initialize and display the map
      function initMap() {
        // Maceió bounds
        let selectedCityBounds = new google.maps.LatLngBounds(
          new google.maps.LatLng(-9.722334881080501, -35.818859918457036), // southwest corner
          new google.maps.LatLng(-9.46099520993466, -35.541455133300786) // northeast corner
        )

        // Set the location to display on the map
        var location = selectedCityBounds.getCenter()

        // Create a new map object centered on the location
        var map = new google.maps.Map(document.getElementById('map'), {
          zoom: 11,
          center: location,
          mapTypeControl: false,
          streetViewControl: false,
          styles: [
            {
              "elementType": "labels",
              "stylers": [
                {
                  "visibility": "off"
                }
              ]
            },
            {
              "featureType": "administrative",
              "elementType": "geometry",
              "stylers": [
                {
                  "visibility": "off"
                }
              ]
            },
            {
              "featureType": "administrative.land_parcel",
              "stylers": [
                {
                  "visibility": "off"
                }
              ]
            },
            {
              "featureType": "administrative.neighborhood",
              "stylers": [
                {
                  "visibility": "off"
                }
              ]
            },
            {
              "featureType": "poi",
              "stylers": [
                {
                  "visibility": "off"
                }
              ]
            },
            {
              "featureType": "road",
              "elementType": "labels.icon",
              "stylers": [
                {
                  "visibility": "off"
                }
              ]
            },
            {
              "featureType": "transit",
              "stylers": [
                {
                  "visibility": "off"
                }
              ]
            }
          ]
        });

        map.controls[google.maps.ControlPosition.RIGHT_TOP].push(document.getElementById('legend'));

        let featuresPromise = fetchHoodGeoJSON().then(hoods => {
          hoods.features = hoods.features.filter(feature => {
            return !feature.geometry.coordinates.some(coords => {
              return coords.some(coord => {
                let point = {lat: coord[1], lng: coord[0]}
                return !selectedCityBounds.contains(point);
              })
            })
          })
          let features = map.data.addGeoJson(hoods)

          map.data.addListener("mouseover", (event) => {
            document.getElementById("density-info-box").textContent = event.feature.getProperty('Value');
            document.getElementById("population-info-box").textContent = event.feature.getProperty('População 2010');
          });

          return features;
        });

        fetchHoodHistoryJSON().then(async hoodHistory => {
          const years = Object.keys(hoodHistory).sort();
          const yearsInput = document.querySelector('input.years');
          const yearsDataList = document.querySelector('datalist.years');

          yearsInput.setAttribute('min', years[0].toString());
          yearsInput.setAttribute('max', years[years.length-1].toString());
          yearsInput.value = yearsInput.getAttribute('max');

          while(yearsDataList.firstChild) {
            yearsDataList.removeChild(yearsDataList.firstChild);
          }

          for (let year of years) {
            const newOption = document.createElement('option');
            newOption.value = newOption.label = year;
            yearsDataList.appendChild(newOption);
          }

          let features = await featuresPromise;

          yearsInput.addEventListener('input', (evt) => {
            updateFeatures(map, features, hoodHistory[yearsInput.value]);
            addElementsToLegend(features, hoodHistory);
          });

          yearsInput.dispatchEvent(new Event('input'));

          document.querySelector('#map-controls').removeAttribute('hidden');
        });

        // Add a marker for the location
        // var marker = new google.maps.Marker({
        //   position: location,
        //   map: map,
        //   title: 'Maceio - AL'
        // });
      }
    </script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= GMAPS_API_KEY %>&callback=initMap">
    </script>
  </body>
</html>
